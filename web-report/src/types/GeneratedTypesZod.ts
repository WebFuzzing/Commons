// Generated by ts-to-zod
import { z } from "zod";

export const operationIdSchema = z.string();

export const testCaseIdSchema = z.string();

export const httpStatusSchema = z.number();

export const testFilePathSchema = z.string();

export const testCaseSchema = z.record(z.unknown()).and(
  z.object({
    id: testCaseIdSchema.optional(),
    filePath: testFilePathSchema.optional(),
    name: z.string().optional(),
    startLine: z.number().optional(),
    endLine: z.number().optional(),
  }),
);

export const faultCategoryIdSchema = z.record(z.unknown()).and(
  z.object({
    code: z.number(),
    context: z.string().optional().nullable(),
  }),
);

export const coveredEndpointSchema = z.record(z.unknown()).and(
  z.object({
    endpointId: operationIdSchema,
    testCaseId: testCaseIdSchema,
    httpStatus: z.array(httpStatusSchema).nullable(),
  }),
);

export const coverageCriterionSchema = z.record(z.unknown()).and(
  z.object({
    name: z.string(),
    covered: z.number(),
    total: z.number().optional().nullable(),
  }),
);

export const rESTReportSchema = z.record(z.unknown()).and(
  z.object({
    totalHttpCalls: z.number(),
    endpointIds: z.array(operationIdSchema),
    coveredHttpStatus: z.array(coveredEndpointSchema),
  }),
);

export const coverageSchema = z.record(z.unknown()).and(
  z.object({
    toolName: z.string(),
    criteria: z.array(coverageCriterionSchema),
  }),
);

export const foundFaultSchema = z.record(z.unknown()).and(
  z.object({
    operationId: operationIdSchema.optional(),
    testCaseId: testCaseIdSchema,
    faultCategories: z
      .tuple([faultCategoryIdSchema])
      .rest(faultCategoryIdSchema),
  }),
);

export const faultsSchema = z.record(z.unknown()).and(
  z.object({
    totalNumber: z.number(),
    foundFaults: z.array(foundFaultSchema),
  }),
);

export const webFuzzingCommonsReportSchema = z.record(z.unknown()).and(
  z.object({
    schemaVersion: z.string(),
    toolName: z.string(),
    toolVersion: z.string(),
    creationTime: z.string(),
    faults: faultsSchema,
    problemDetails: z.record(z.unknown()).and(
      z.object({
        rest: rESTReportSchema.optional(),
      }),
    ),
    totalTests: z.number(),
    testFilePaths: z.array(testFilePathSchema),
    testCases: z.array(testCaseSchema),
    extra: z.array(coverageSchema).optional().nullable(),
  }),
);
