/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema Definition for Web Fuzzing Commons Reports
 */
export interface WebFuzzingReport {
  /**
   * The schema version of WFC needed to use to validate and process this document.
   */
  schema_version: string;
  /**
   * The name of the tool used to create the test cases reported in this document.
   */
  tool_name: string;
  /**
   * The version number of the used tool, e.g., 1.0.0.
   */
  tool_version: string;
  /**
   * The timestamp of when this report file was created.
   */
  creation_time: string;
  faults: Faults;
  problem_details: {
    rest?: RESTReport;
    [k: string]: unknown;
  };
  /**
   * The total number of test cases generated by the tool.
   */
  total_tests: number;
  /**
   * The list of relative paths (compared to this document) of all the generated test suite files.
   */
  test_file_paths: string[];
  /**
   * Information on each generated test case.
   */
  test_cases: TestCase[];
  /**
   * Extra, optional coverage information, collected by different tools.
   */
  extra?: Coverage[];
  [k: string]: unknown;
}
export interface Faults {
  /**
   * The total number of potential faults identified in the generated test suites.
   */
  total_number: number;
  /**
   * Information on all the identified potential faults.
   */
  found_faults: FoundFault[];
  [k: string]: unknown;
}
/**
 * Data-structure to represent found faults, based on operations (e.g., HTTP endpoints in REST, and methods in GraphQL and RPC) and which tests find faults in them.
 */
export interface FoundFault {
  /**
   * A unique identifier for an operation. For example, in REST, it would be a HTTP endpoint, including  verb, e.g., 'GET:/users/{id}'.
   */
  operation_id?: string;
  /**
   * A unique identifier for a test case. It could include its name and file location.
   */
  test_case_id: string;
  /**
   * @minItems 1
   */
  fault_categories: [FaultCategoryId, ...FaultCategoryId[]];
  [k: string]: unknown;
}
/**
 * A unique identifier for a fault type.
 */
export interface FaultCategoryId {
  /**
   * Identifying fault 'code', based on WFC classification.
   */
  code: number;
  /**
   * An optional context for the fault. The same fault type could be manifested in different ways, and we use this property to differentiate among them.
   */
  context?: string;
  [k: string]: unknown;
}
export interface RESTReport {
  /**
   * Total number of HTTP calls made in all the test cases. A test case could contain several HTTP calls, e.g., a POST followed by a GET and then a DELETE.
   */
  total_http_calls: number;
  /**
   * Unique ids of all the endpoints in the tested API.
   */
  endpoint_ids: string[];
  /**
   * List of which HTTP status codes were covered, based on endpoints.
   */
  covered_http_status: CoveredEndpoint[];
  [k: string]: unknown;
}
/**
 * Data-structure to represent which HTTP status code where covered on an endpoint by any of the generated tests.
 */
export interface CoveredEndpoint {
  /**
   * A unique identifier for an operation. For example, in REST, it would be a HTTP endpoint, including  verb, e.g., 'GET:/users/{id}'.
   */
  endpoint_id: string;
  /**
   * A unique identifier for a test case. It could include its name and file location.
   */
  test_case_id: string;
  /**
   * As in a test case the same endpoint could be called more than once, here we report all of the  obtained HTTP status codes
   *
   * @minItems 1
   */
  http_status: [number, ...number[]];
  [k: string]: unknown;
}
export interface TestCase {
  /**
   * A unique identifier for a test case. It could include its name and file location.
   */
  id?: string;
  /**
   * A relative path used to unique locate a test suite file.
   */
  file_path?: string;
  /**
   * The name of the test case, as it appears in the generated test file.
   */
  name?: string;
  /**
   * The line number in the generated test suite file where the code of this test case starts.
   */
  start_line?: number;
  /**
   * The line number in the generated test suite file where the code of this test case ends.
   */
  end_line?: number;
  [k: string]: unknown;
}
export interface Coverage {
  /**
   * The name of the tool used to collect and compute the coverage criteria.
   */
  tool_name: string;
  criteria: CoverageCriterion[];
  [k: string]: unknown;
}
export interface CoverageCriterion {
  /**
   * The name of this coverage criterion.
   */
  name: string;
  /**
   * The number of testing targets for this criterion that were covered.
   */
  covered: number;
  /**
   * Optional number of all testing targets for this criterion. For some criteria, this number can be unknown.
   */
  total?: number;
  [k: string]: unknown;
}
